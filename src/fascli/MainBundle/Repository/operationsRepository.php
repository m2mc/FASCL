<?php

namespace fascli\MainBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * operationsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class operationsRepository extends EntityRepository
{
     
     public function AllUserOperat($user){
    $now = new \DateTime();
    $nowd = $now->format('d');
    $nowm = $now->format('m');
    $nowa = $now->format('Y');
    $qb = $this->createQueryBuilder('o');
   $qb ->where('o.caissier = :auteur')
      ->setParameter('auteur', $user)
      ->andwhere('DAY(o.datope) = :jj')
      ->setParameter('jj', $nowd)
      ->andwhere('MONTH(o.datope) = :mm')
      ->setParameter('mm', $nowm)
      ->andwhere('YEAR(o.datope) = :aa')
      ->setParameter('aa', $nowa)
     ->orderBy('o.id', 'DESC');
   return $qb->getQuery()
            ->getResult();
}

public function AllUserEnvois($user){
    $type = 'ENVOI';
    $now = new \DateTime();
    $nowd = $now->format('d');
    $nowm = $now->format('m');
    $nowa = $now->format('Y');
    $qb = $this->createQueryBuilder('o');
   $qb ->where('o.caissier = :auteur')
      ->setParameter('auteur', $user)
      ->andwhere('DAY(o.datope) = :jj')
      ->setParameter('jj', $nowd)
      ->andwhere('MONTH(o.datope) = :mm')
      ->setParameter('mm', $nowm)
      ->andwhere('YEAR(o.datope) = :aa')
      ->setParameter('aa', $nowa)
      ->andwhere('o.type = :tt')
      ->setParameter('tt', $type)
     ->orderBy('o.id', 'DESC');
   return $qb->getQuery()
            ->getResult();
}

public function AllUserPaiements($user){
    $type = 'PAIEMENT';
    $now = new \DateTime();
    $nowd = $now->format('d');
    $nowm = $now->format('m');
    $nowa = $now->format('Y');
    $qb = $this->createQueryBuilder('o');
   $qb ->where('o.caissier = :auteur')
      ->setParameter('auteur', $user)
      ->andwhere('DAY(o.datope) = :jj')
      ->setParameter('jj', $nowd)
      ->andwhere('MONTH(o.datope) = :mm')
      ->setParameter('mm', $nowm)
      ->andwhere('YEAR(o.datope) = :aa')
      ->setParameter('aa', $nowa)
      ->andwhere('o.type = :tt')
      ->setParameter('tt', $type)
     ->orderBy('o.id', 'DESC');
   return $qb->getQuery()
            ->getResult();
}

public function getEnvoisClient($clientId)
    {
        $typope = 'ENVOI';
        $qb = $this->createQueryBuilder('a')
                   ->select('a')
                   ->where('a.client = :client_id')
                   ->setParameter('client_id', $clientId)
                    ->andWhere('a.type = :typope')
                   ->setParameter('typope', $typope)
                   ->addOrderBy('a.id',"DESC");
           
        return $qb->getQuery()
                  ->getResult();
    }

    public function getPaiementsClient($clientId)
    {
        $typope = 'PAIEMENT';
        $qb = $this->createQueryBuilder('a')
                   ->select('a')
                   ->where('a.client = :client_id')
                   ->setParameter('client_id', $clientId)
                    ->andWhere('a.type = :typope')
                   ->setParameter('typope', $typope)
                   ->addOrderBy('a.id',"DESC");
           
        return $qb->getQuery()
                  ->getResult();
    }

    public function getEnvoisIntervalClient($clientId,$debut,$fin)
    {
        $typope = 'ENVOI';
        $qb = $this->createQueryBuilder('a')
                   ->select('a')
                   ->where('a.client = :client_id')
                   ->setParameter('client_id', $clientId)
                    ->andWhere('a.type = :typope')
                   ->setParameter('typope', $typope)
                    ->andWhere('a.datope BETWEEN :debut AND :fin')
                    ->setParameter('debut', $debut)
                    ->setParameter('fin', $fin)
                   ->addOrderBy('a.id',"DESC");
           
        return $qb->getQuery()
                  ->getResult();
    }

    public function getPaiementsIntervalClient($clientId,$debut,$fin)
    {
        $typope = 'PAIEMENT';
        $qb = $this->createQueryBuilder('a')
                   ->select('a')
                   ->where('a.client = :client_id')
                   ->setParameter('client_id', $clientId)
                    ->andWhere('a.type = :typope')
                   ->setParameter('typope', $typope)
                   ->andWhere('a.datope BETWEEN :debut AND :fin')
                    ->setParameter('debut', $debut)
                    ->setParameter('fin', $fin)
                   ->addOrderBy('a.id',"DESC");
           
        return $qb->getQuery()
                  ->getResult();
    }

/*

public function getUserOperat($nbre, $user)
    {
        $qb = $this->createQueryBuilder('r')
                   ->select('r')
                   ->where('r.abonnement = :abonn_id')
                   ->addOrderBy('r.id',"DESC")
                   ->setParameter('abonn_id', $AbonnId);

        return $qb->getQuery()
                  ->getResult();
    }

    public function dernieresDepenses($nbre){
    
    $qb = $this->createQueryBuilder('d');
   $qb ->addOrderBy('d.id', "DESC")
       ->setMaxResults($nbre);
   return $qb->getQuery()
            ->getResult();
    }

    $qb->where('a.auteur = :auteur')
      ->setParameter('auteur', $auteur)
     ->andWhere('a.date < :annee')
      ->setParameter('annee', $annee)
     ->orderBy('a.date', 'DESC');

  return $qb->getQuery()
            ->getResult();   */
	
}
